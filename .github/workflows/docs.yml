name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/krenamer/**'
      - '.github/workflows/docs.yml'
  pull_request:
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/krenamer/**'
      - '.github/workflows/docs.yml'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install mkdocs-minify-plugin
          pip install pymdown-extensions
          pip install sphinx sphinx-rtd-theme

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build Sphinx API Documentation
        run: |
          # Build Sphinx API documentation
          cd docs/api-docs
          sphinx-build -b html . _build/html
          
          # Copy API docs to main documentation directory
          if [ -d "../api" ]; then
            rm -rf "../api"
          fi
          cp -r "_build/html" "../api"
          cd ../..
          
          echo "Sphinx API documentation built successfully!"

      - name: Build with MkDocs
        run: |
          # Set site_url if using GitHub Pages
          if [ -n "${{ steps.pages.outputs.base_url }}" ]; then
            export SITE_URL="${{ steps.pages.outputs.base_url }}"
          fi
          
          # Build documentation with MkDocs (includes the API docs from Sphinx)
          mkdocs build --clean
          
          # Verify build output
          ls -la site/
          ls -la site/api/
          echo "Documentation built successfully!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  # Deployment job
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4